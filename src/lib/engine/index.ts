import {IFileSetProducer, ManualApprovalStep, PipelineBase, ShellStep} from '@aws-cdk/pipelines';
import * as cdk from '@aws-cdk/core';
import {BuildkiteCfnProvider, CfnBuildkitePipeline} from '../constructs/layer1';
import {ISecret} from '@aws-cdk/aws-secretsmanager';

/**
 * Properties for a `CodePipeline`
 */
export interface BuildkiteCdkPipelineProps {
  /**
   * The build step that produces the CDK Cloud Assembly
   *
   * The primary output of this step needs to be the `cdk.out` directory
   * generated by the `cdk synth` command.
   *
   * If you use a `ShellStep` here and you don't configure an output directory,
   * the output directory will automatically be assumed to be `cdk.out`.
   */
  readonly synth: IFileSetProducer;

  /**
   * The name of the Buildkite pipeline
   *
   * @default - Automatically generated
   */
  readonly pipelineName?: string;

  /**
   * The buildkite organization in which to create the pipeline
   */
  readonly organization: string;

  /**
   * A secretsmanager secret containing the buildkite api token
   */
  readonly apiTokenSecret: ISecret;

  /**
   * The clone URL (SSH/HTTPS) of the repository to build
   */
  readonly repositoryUrl: string;
}

export class BuildkiteCdkPipeline extends PipelineBase {
  public pipelineconfig: any;
  private readonly _pipelineName?: string;
  private readonly _organization: string;
  private readonly _apiTokenSecret: ISecret;
  private readonly _repository: string;

  constructor(scope: cdk.Construct, id: string, private readonly props: BuildkiteCdkPipelineProps) {
    super(scope, id, props);

    this._pipelineName = props.pipelineName;
    this._organization = props.organization;
    this._apiTokenSecret = props.apiTokenSecret;
    this._repository = props.repositoryUrl;
  }

  protected doBuildPipeline(): void {
    this.pipelineconfig = {
      steps: [],
    };

    if (this.synth instanceof ShellStep) {
      console.log(this.synth.outputs[0]);

      const commandStep = {
        commands: this.synth.commands,
        artifacts: [] as any,
      };
      for (const outp of this.synth.outputs) {
        commandStep.artifacts.push(`${outp.directory}/**/*`);
      }

      this.pipelineconfig.steps.push(commandStep, {wait: null});
    }

    for (const wave of this.waves) {
      console.log(`processing wave: ${wave.id}`);
      for (const stage of wave.stages) {
        console.log(`  processing stage: ${stage.stageName}`);

        // Add manual gates if any
        for (const mas of stage.pre.filter(s => s instanceof ManualApprovalStep)) {
          const mac = mas as ManualApprovalStep;
          this.pipelineconfig.steps.push({
            block: `deploy stage ${stage.stageName}`,
            prompt: mac.comment,
          });
        }

        // Add shell steps if any
        for (const mas of stage.pre.filter(s => s instanceof ShellStep)) {
          const mac = mas as ShellStep;
          this.pipelineconfig.steps.push(
            {
              commands: mac.commands,
            },
            {
              wait: null,
            }
          );
        }

        for (const stack of stage.stacks) {
          this.pipelineconfig.steps.push(
            {
              commands: [`cdk deploy ${stack.stackName}`],
            },
            {
              wait: null,
            }
          );
        }
      }
    }

    const provider = new BuildkiteCfnProvider(this, 'BkProvider', {
      apiTokenSecret: this._apiTokenSecret,
    });

    new CfnBuildkitePipeline(this, 'cdk-pipeline', {
      pipelineName: this._pipelineName,
      organization: this._organization,
      provider: provider,
      configuration: JSON.stringify(this.pipelineconfig),
      repository: this._repository,
    });
  }
}
